/**
 * plugin.js
 */

(function(tinymce) {
    'use strict';

    var injector = angular.element(document.getElementById('umbracoMainPageBody')).injector();
    var classes = "custom-button";
    var stateSelector = 'a[href][class="' + classes + '"]';

    tinymce.create('tinymce.plugins.CustomButton', {
        init: function (editor) {
            editor.addButton('custombutton', {
                tooltip: 'Custom button',
                icon: 'image',
                image: '/Umbraco/Images/Editor/formButton.gif',
                stateSelector: stateSelector,
                onclick: function () {
                    var model = getModel(editor, stateSelector, getUrlDataFromSection);
                    openWindow(editor, model);
                }
            });
        },

        getInfo: function () {
            return {
                longname: 'Custom Button with url',
                author: 'Intive',
                version: '1.0'
            };
        }
    });

    function getModel(editor, selector, callback) {
        var node = getSectionNode(editor, selector);
        var data = callback(editor, node);

        return {
            data: data,
            node: node
        };
    }

    function getSectionNode(editor, selector) {
        var dom = editor.dom;
        var selection = editor.selection;
        var selectedElement = selection.getNode();
        var element = selector ? dom.getParent(selectedElement, selector) : null;

        return element;
    }

    function getUrlDataFromSection(editor, scopeNode) {
        return {
            url: editor.dom.getAttrib(scopeNode, 'href') || '',
            name: getName(editor, scopeNode),
            target: editor.dom.getAttrib(scopeNode, 'target') || '_blank'
        };

        function getName(editor, scopeNode) {
            var nameToReturn = '';

            if (scopeNode) {
                nameToReturn = scopeNode.innerText || scopeNode.textContent;
            } else {
                nameToReturn = editor.selection.getContent({format: 'text'});
            }

            return nameToReturn || '';
        }
    }

    function makeLink(editor, data) {
        editor.execCommand('mceInsertLink', false, {
            href: data.url,
            title: data.name,
            target: data.target ? data.target : null,
            'class': classes,
            'data-id': data.id ? data.id : null
        });
    }

    function removeLink(editor) {
        editor.execCommand('unlink');
    }

    function openWindow(editor, model) {
        return injector.invoke([
            'dialogService',
            function (dialogService) {
                dialogService.linkPicker({
                    currentTarget: model.data,
                    callback: function (data) {
                        if (data.url) {
                            makeLink(editor, data);
                        } else {
                            removeLink(editor);
                        }
                    }
                });
            }
        ]);
    }

    tinymce.PluginManager.add('custombutton', tinymce.plugins.CustomButton);
})(tinymce);
